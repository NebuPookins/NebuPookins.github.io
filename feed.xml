<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nebu&#39;s FP Notes</title>
    <description>Exploration of FP topics.
</description>
    <link>http://nebupookins.github.io//</link>
    <atom:link href="http://nebupookins.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 05 Aug 2015 21:17:00 -0700</pubDate>
    <lastBuildDate>Wed, 05 Aug 2015 21:17:00 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Pure Functions and Total functions</title>
        <description>&lt;p&gt;If you ask a programmer “do you use functions?” he’ll probably give you a funny
look. “Of course I use functions!” he’ll reply. “I use a function to tell me
what time it is; I use a function to save data to a database; I use a function
to tell me the position of the mouse cursor; etc. I use functions all the time!”&lt;/p&gt;

&lt;p&gt;If a mathematician happened to be within earshot during this conversation,
she’ll probably give &lt;em&gt;him&lt;/em&gt; a funny look. “None of those things are functions!”
she’ll point out. “A function is a mapping from a set of inputs to a set of
outputs. For example, &lt;script type=&quot;math/tex&quot;&gt;f(x) = x^2 + 2x&lt;/script&gt;.”&lt;/p&gt;

&lt;h1 id=&quot;pure-functions&quot;&gt;Pure Functions&lt;/h1&gt;

&lt;p&gt;Because I’m a fan of &lt;a href=&quot;https://en.wikipedia.org/wiki/Linguistic_description&quot;&gt;descriptivism&lt;/a&gt;,
I’m not interested in trying to argue that one of them is “right” and the other
person is “wrong”. Instead, I’ll point out that because of this ambiguity, we
humans have come up with the term “pure function” (and “impure function”) to
disambiguate which function we mean. A “pure” function is a function in the
mathematician’s sense: a mapping from a set of inputs to a set of outputs.&lt;/p&gt;

&lt;p&gt;The output of a pure function is determined completely by its inputs: If you
pass the value 3 to a pure function and it returns 15, then by virtue of the
fact that that function is pure, you are guaranteed that any time you invoke the
function with 3 again in the future, it will always return 15.&lt;/p&gt;

&lt;p&gt;This is in contrast to a function whose output may depend on the current time.
Or a function which reads from a global variable as part of how it determines
its output. Passing in the same inputs might yield a different output for two
different invocations.&lt;/p&gt;

&lt;h2 id=&quot;side-effects&quot;&gt;Side Effects&lt;/h2&gt;

&lt;p&gt;A pure function by definition does not have any “side effects”. So not only are
we guaranteed that a pure function will always return the same output given the
same input, but we’re also guaranteed that the function will “do nothing”
&lt;em&gt;except&lt;/em&gt; return its output.&lt;/p&gt;

&lt;p&gt;This is in contrast to a function which writes something to disk, or which sets
a global variable, or throws an exception, or anything else beyond returning a
value that is in some way observable to the caller.&lt;/p&gt;

&lt;p&gt;It is always safe to replace a given invocation of a pure function with the
result of that invocation. For example, given the code snippet &lt;code&gt;x = f(1) + f(1)&lt;/code&gt;,
if you know that &lt;code&gt;f&lt;/code&gt; is a pure function, then it is safe to refactor this code
to &lt;code&gt;x = 2 * f(1)&lt;/code&gt;. On the other hand, if &lt;code&gt;f&lt;/code&gt; was impure, then this refactoring
might have introduced a bug. For example, perhaps &lt;code&gt;f&lt;/code&gt; incremented a counter, and
the original implementation would increment the counter twice (since &lt;code&gt;f&lt;/code&gt; was
invoked twice), whereas the refactored implementation would only increment the
counter once.&lt;/p&gt;

&lt;p&gt;(Incidentally, a bit of jargon for you: we refer to the concept “it is always
safe to replace a given invocation of a pure function with the result of that
invocation” as “Referential Transparency”).&lt;/p&gt;

&lt;h2 id=&quot;pure-functions-are-easy-to-test&quot;&gt;Pure Functions are Easy to Test&lt;/h2&gt;

&lt;p&gt;One nice property of pure functions is that they are much easier to test than
impure functions. A pure function simply returns some result given an input and
is guaranteed to do nothing else but return that result. Therefore, to test a
pure function, you simply need to provide it an input, and then check that the
returned result is what you expected it to be.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you were testing a function for which its output depended on something other
than the parameters you pass to it, then you’d first have to know what those
hidden dependencies were (which would possibly lead to your tests becoming
coupled to the &lt;em&gt;implementation&lt;/em&gt; of the function instead of its &lt;em&gt;contract&lt;/em&gt;), and
then you’d need to see if you can intercept and control those hidden
dependencies somehow.&lt;/p&gt;

&lt;p&gt;If you were testing a function which produced a side effect, you often don’t
want the side effect to actually happen during testing. For example, let’s say
you have a function &lt;code&gt;deleteUserFromDB&lt;/code&gt; that you wanted to test. You want to
check that the function is indeed capable of deleting users, but you definitely
don’t want your tests to connect to the real production database. What if there
is a bug in the implementation and it deletes the wrong user? I mean, you’re
testing this function because you’re not sure that it’s bug free, right?&lt;/p&gt;

&lt;p&gt;In practice, this usually means creating one or more mock objects, but this
assumes that the function under test provides some sort of hook so that you can
inject in your mocks. If the function is hardcoded to connected to a database,
interjecting your mocks may be difficult or impossible, depending on what
programming language you’re using and what facilities it provides.&lt;/p&gt;

&lt;p&gt;If you’re testing a function which does not necessarily return the same value
given the same inputs, and you check that it’s output is correct for a given
invocation, how can you be sure that it’ll be right on the next invocation?
Maybe that’s too complicated to check, so you’ll just be satisfied if you can
verify that you get the results you want on the &lt;em&gt;first&lt;/em&gt; invocation of the
function. But then how can you make sure your test is the first one to invoke
the function? What if somebody adds a test to the test suite that runs before
your test, and happens to invoke the function you want to test? Does your
test runner even guarantee a deterministic run-order for your tests?&lt;/p&gt;

&lt;h2 id=&quot;pure-functions-are-easy-to-parallelize&quot;&gt;Pure Functions are Easy to Parallelize&lt;/h2&gt;

&lt;p&gt;Speaking of non-determinism, the behavior of a pure function is determined
entirely by its inputs. So in particular, the behavior of a pure function does
not depend on the time or timing at which it is executed, or what thread it is
executed upon.&lt;/p&gt;

&lt;p&gt;This makes them extremely easy to parallelize; in fact, the compiler can
automatically parallelize any sequence of pure functions without any guidance
from the programmer, without the need to perform any locking or any other form
of synchronization. Race conditions and other multithreading bugs are only
possible in the presence of side effects, which pure functions are guaranteed
to not have.&lt;/p&gt;

&lt;h1 id=&quot;total-functions&quot;&gt;Total Functions&lt;/h1&gt;

&lt;p&gt;A related term is “Total Function”. A function is “total” if it is defined for
all of its possible inputs. As a counter example, consider the function &lt;code&gt;tail&lt;/code&gt;
that takes a list as its input and returns a new list which is equal to
the original list, except with its first element removed. &lt;code&gt;tail&lt;/code&gt; is not a
total function (it is a “partial function”), because it is not defined for the
empty list.&lt;/p&gt;

&lt;p&gt;Note that “total” and “pure” are orthogonal concepts: A function can be both,
neither, or any combination in between. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;not(x: boolean): boolean&lt;/code&gt;, which returns the negation of its input, is both
pure and total.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f(x: int): int = { callCount++; return 100 / x; }&lt;/code&gt; is neither pure nor total.
It is not defined for the input &lt;code&gt;0&lt;/code&gt;, and it performs a side effect.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;f(x: int): int = { callCount++; return x; }&lt;/code&gt; is total but not pure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things get tricky when we want to see a non-total function that happens to also
be pure…&lt;/p&gt;

&lt;h2 id=&quot;pure-partial-functions&quot;&gt;Pure partial functions&lt;/h2&gt;

&lt;p&gt;If a partial function expresses its non-totality via a mechanism such as
throwing an exceptions, then the caller can usually observe the fact that an
exception was thrown (e.g. via a &lt;code&gt;catch&lt;/code&gt; statement). In such a case, we would
say that the partial function is impure, because it triggered an observable
side-effect.&lt;/p&gt;

&lt;p&gt;On the other hand, if a partial function expressed its non-totality by not
returning (e.g. by going into an infinite loop), then the caller would never
have the opportunity to observe any side effect (because control never returns
to the caller). Hence the function is pure.&lt;/p&gt;

&lt;p&gt;Notice that if you’re working in a programming language which allows you to
throw exceptions, but provides no facility to catch exceptions, then from the
caller’s perspective, this is the same as the infinite-loop example: The caller
has no opportunity to observe any side effect, and thus the non-total function
is also pure.&lt;/p&gt;

&lt;p&gt;Another variant on this idea is if a programming language provides two types of
throwables; for example, an “error” can be thrown and caught, but a “fatal” can
only be thrown but never caught. In such a language, a partial function that
threw “errors” (or a mix of “errors” and “fatals” depending on some business
logic) would be impure, but a partial function that threw only “fatals” could
be pure.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2015 20:21:12 -0000</pubDate>
        <link>http://nebupookins.github.io//2015/08/05/pure-functions-and-total-functions.html</link>
        <guid isPermaLink="true">http://nebupookins.github.io//2015/08/05/pure-functions-and-total-functions.html</guid>
        
        <category>functional programming</category>
        
        
      </item>
    
      <item>
        <title>Software Engineering Challenge: Recipe Database</title>
        <description>&lt;p&gt;There exists the term “Software Engineer” and “Computer Scientist”. There exists
almost no consensus on what these terms mean and what the distinction between
the two of them is. I’m going to offer my personal definition. I’m not saying
it’s &lt;em&gt;the&lt;/em&gt; one true definition, and I don’t even think that it’s the most widely
used definition. I have no idea which definition is most widely used, but I am
very confident that that most widely used definition is also a minority; i.e.
for all definitions D, the size of the population that uses D is (much) less
than 50% of the population of all people who use those terms.&lt;/p&gt;

&lt;p&gt;So here’s my definition: A computer scientist is more likely to be interested in
the theory, whereas a computer engineer is more likely to be interested in the
practical implementations. A computer scientist would be able to come up with a
proof showing that a particular algorithm is the optimal way to solve a given
problem, when run on an idealized abstraction of computation. A computer
engineer would then be able to take that algorithm and implement it on actual
(not idealized) computers with finite memories, and may need to deviate from
the supposedly “proven optimal” design in order to increase performance due to
issues like cache misses or finite word sizes (dealing with integers smaller
than 64 bits is trivial. As soon as you cross that threshold, you have a whole
other story).&lt;/p&gt;

&lt;p&gt;For what it’s worth, I self-identify more as a computer scientist than as a
software engineer (though my official job title these days is “software
development engineer”).&lt;/p&gt;

&lt;p&gt;With that in mind, here’s a little challenge for you (regardless of which one
you self identify as). I was prompted to write this challenge from a
StackOverflow post (which I won’t link to until the end of the post ‘cause I
don’t want you to be tempted to cheat and look at the answer), but I’ve seen
variations of this problem many times over the years.&lt;/p&gt;

&lt;p&gt;Imagine we’re a new start up and we want to build a recipe database, where the
user can enter in what ingredients they have available to them, and we return
the set of all recipes that can be followed using only those ingredients.&lt;/p&gt;

&lt;p&gt;For the purposes of this challenge, a &lt;code&gt;Recipe&lt;/code&gt; is merely a &lt;code&gt;Set&amp;lt;Ingredient&amp;gt;&lt;/code&gt;
i.e. we don’t care how long it takes to prepare, what the steps are, and so
on; all we care about is whether or not we have the ingredients necessary to
follow the recipe. The database is some sort of collection of &lt;code&gt;Recipe&lt;/code&gt;s (it
might be a list, a hashset, a map, or whatever; that’s part of what you need to
figure out for your design). And when the user issues a query to you, they will
do so by providing a &lt;code&gt;Set&amp;lt;ingredients&amp;gt;&lt;/code&gt; (It’s a set because ordering doesn’t
matter).&lt;/p&gt;

&lt;p&gt;Also note that for simplicity, we don’t care how much of an ingredient is
necessary. For example, if a recipe needs milk, and the user says they have
milk, then we should include that recipe (assuming the user also has all the
other ingredients necessary for that recipe). We don’t attempt to have the user
specify how much milk they have and compare that against how much milk the
recipe say it needs.&lt;/p&gt;

&lt;p&gt;Finally, to give you an idea of any scaling issues we may someday face,  we want
loads of about 100’000 distinct possible ingredients and about 1’000’000
distinct recipes (although of course, right now we only have about 1000 or so
recipes, we’re adding more every day). We expect the typical recipe to require
somewhere between 5  and 50 ingredients, and we expect the user to on average
submit queries with about 100 ingredients (don’t worry, they don’t have to type
them all in; we’re going to make an app that takes care of keeping track of what
the user has available, the user just has to press a single button and the app
populates the query). And ideally, we’re hoping to one day get to 1’000’000
queries issued per day.&lt;/p&gt;

&lt;p&gt;Let’s look at a concrete toy example. In this example, there exists only 3
ingredients: bread, egg and milk. Here are all the recipes that exist in the DB:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Glass of milk. Required ingredients: milk.&lt;/li&gt;
  &lt;li&gt;Fried egg. Required ingredients: egg.&lt;/li&gt;
  &lt;li&gt;Omelet. Required ingredients: egg, milk.&lt;/li&gt;
  &lt;li&gt;Toast. Required ingredients: bread.&lt;/li&gt;
  &lt;li&gt;French Toast. Required ingredients: bread, egg, milk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here’s the test cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If a user submits the query &lt;code&gt;{milk}&lt;/code&gt;, we should return &lt;code&gt;{Glass of milk}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If the user submitthe query &lt;code&gt;{egg, milk}&lt;/code&gt;, we should return
&lt;code&gt;{Glass of milk, Fried Egg, Omelet}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If a user submits the query &lt;code&gt;{bread, milk}&lt;/code&gt;, we should return
&lt;code&gt;{Glass of milk, Toast}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and try to come up with a design now, and then come back to this blog
post once you feel you’ve got a clean, simple design that you could give to a
development team to implement.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/vendor/wikipe-tan/spoiler-alert.png&quot; alt=&quot;Spoiler Alert! Care before scrolling further!&quot; /&gt;
	&lt;figcaption&gt;
		&lt;cite&gt;
			Original Wikipe-tan image by &lt;a href=&quot;https://en.wikipedia.org/wiki/User:Kasuga&quot;&gt;Kasuga&lt;/a&gt;;
			&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC BY-SA 3.0&lt;/a&gt;
		&lt;/cite&gt;
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Done? Great.&lt;/p&gt;

&lt;p&gt;If you’re like most professional software developers, you probably started
thinking about data structures and algorithms, and possibly about their running
time and memory requirements.&lt;/p&gt;

&lt;p&gt;Perhaps you tried to construct some sort of 20-questions style decision tree,
along with an algorithm to rebalance the trees as new recipes/ingredients are
added, and some sort of heuristic for determining the optimal order in which
to ask those questions to reduce the space of possible recipe-sets as quickly
as possible. E.g. Does the query include bread? If not we can eliminate Toast
and French Toast, but now we need to ask a question to determine whether or not
to keep Glass of milk, Fried egg and Omelet.&lt;/p&gt;

&lt;p&gt;Or perhaps you tried to set up a key-value-Map-like datastructure where the keys
are internally organized into a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hasse_diagram&quot;&gt;Hasse Diagram&lt;/a&gt;
so that when a user submitted their list of available ingredients, you’d fetch
the recipes that exactly match the user’s available ingredients, and then travel
down the “subset edges” in the Hasse diagram to also include recipes that don’t
necessarily require every single ingredient the user owns. E.g. The user has egg
and milk? Excellent, then they can definitely make Omelet. But now let’s look up
all possible subsets of their available ingredients to see if there are other
things they might be able to milk.&lt;/p&gt;

&lt;p&gt;Maybe you thought of using &lt;a href=&quot;http://akka.io/&quot;&gt;a distributed network of actors&lt;/a&gt;,
each actor perhaps responsible for some cluster of ingredients that commonly
appear together, and when a request comes in, it gets passed around with a
result list appended to.&lt;/p&gt;

&lt;p&gt;Or maybe you went with an &lt;a href=&quot;http://guide.couchdb.org/draft/consistency.html&quot;&gt;eventual consistency&lt;/a&gt;
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn568103.aspx&quot;&gt;CQRS&lt;/a&gt; route where when
a new recipe is submitted, it gets batched into some sort of &lt;a href=&quot;http://www-01.ibm.com/software/data/infosphere/hadoop/mapreduce/&quot;&gt;MapReduce&lt;/a&gt; batch process where we precompute
the answer to every possible query the user might issue into a caching layer.
Queries are instantaneous, and we just recompute the caches every now and then
when we have new recipes to integrate in.&lt;/p&gt;

&lt;p&gt;Almost nobody thinks “I’ll just brute force it.”&lt;/p&gt;

&lt;p&gt;Here’s a JavaScript program that creates a database of with 10 ingredients, 10
recipes, 2 ingredients per recipe, and assumes a typical user query will say they
have 5 ingredients available to them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredientsPerRecipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredientsInQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Set up a fake DB of recipes&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ingredients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Here are the ingredients:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;neededIngredients&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredientsPerRecipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;neededIngredients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;needed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;neededIngredients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Here are the recipes:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Set up a fake query&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numIngredientsInQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Here&amp;#39;s a query:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Time how long brute force takes&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Found &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; recipes in &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; milliseconds.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can run it in your browser’s debug console, or save it to a local file and
run it in Node.js. Either way, it typically finishes in 0 milliseconds.&lt;/p&gt;

&lt;p&gt;I’ve chosen these small numbers so you can run it and inspect the output and
convince yourself it does the right thing and is bug free.&lt;/p&gt;

&lt;p&gt;Once you’re satisfied the program is free from bugs, change &lt;code&gt;numIngredients&lt;/code&gt; to
1000000, &lt;code&gt;numRecipes&lt;/code&gt; to 1000000, &lt;code&gt;numIngredientsPerRecipe&lt;/code&gt; to 50, and
&lt;code&gt;numIngredientsInQuery&lt;/code&gt; to 100 as per the original “ideal case” projections. I
don’t recommend running this in the browser (Chromium and Firefox both don’t
appreciate creating a couple of arrays with a million entries), but it should
run fine in Node.js, where it completes it reports the brute force algorithm
takes 125 milliseconds.&lt;/p&gt;

&lt;h1 id=&quot;okay-so-what&quot;&gt;Okay, So What?&lt;/h1&gt;

&lt;p&gt;So the brute force solution is pretty face. The smarter solutions are probably
faster. And faster is better, right?&lt;/p&gt;

&lt;p&gt;Well, maybe… It depends on the cost-benefit analysis.&lt;/p&gt;

&lt;p&gt;The brute force solution is dead simple. The code snippet I pasted above is 53
lines long, but the majority of those lines are setting up an environment to
test the solution in. The solution itself is only 17 lines long, but 10 of those
lines implement the &lt;code&gt;containsAll&lt;/code&gt; function and could be eliminated if you’re
already using a library like &lt;a href=&quot;https://lodash.com/docs#every&quot;&gt;lodash.js&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;haystack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numRecipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;candidateRecipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, if we were really code-golfing and had “reasonable” libraries available
to us, we could probably write a one liner, and it wouldn’t even suffer in
terms of readability:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;recipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ingredientsAvailable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How many lines of code would it take to implement an Akka actor based solution?
A MapReduce cluster? Actually, never mind &lt;em&gt;lines&lt;/em&gt;, how many &lt;em&gt;files&lt;/em&gt; would it take
to implement such a system? After it’s all done, how confident are you that it’s
free of bugs? And if there were a bug, how difficult would it be to track down
the bug and fix it? Did everyone on your team understand the Hasse solution? If
you break up into groups and work on different parts of the problem, what are the
odds that when you assemble all your modules together, everything will work?&lt;/p&gt;

&lt;p&gt;How long would it take you to implement the “more sophisticated” solutions? How
long would it have taken you to write the brute force solution? 120 seconds?
An hour or two? Do you think you could implement the decision tree solution in a
day, or is it looking more like a week or two? Are you assuming you working solo
on the problem, or are you gonna split the work with another developer or two?
What are your combined salaries? How much more did it cost to implement the smarter
solution? Assuming the more sophisticated solution was twice as fast, was the
added cost worth bringing the query time down from 125ms to 60ms? Hell, assuming
the more sophisticated solution was infinitely fast, was the price worth removing
125ms from the user’s wait time? Would the user even notice a 125ms speed up in
the app, or is the latency from their cell phone negotiating packets with their
wireless carrier more likely to be the bottleneck there?&lt;/p&gt;

&lt;p&gt;If you’re a startup, you don’t even have a million recipes in your database yet.
Those were just projections for an ideal case. You’d only have like 1000
recipes, and maybe 10 users a day if you’re lucky. Do you want to pay 3
developers for 2 weeks to launch this site, and &lt;em&gt;then&lt;/em&gt; find out whether or not
it’s a successful venture? Or you do want to pay 1 developer for an hour’s worth
of work and then launch and find out whether there’s any demand for this app?
(BTW, feel free to use 1 liner your recipe start up. I’m releasing it to the
public domain.)&lt;/p&gt;

&lt;p&gt;I think this is a huge case of &lt;a href=&quot;https://en.wikipedia.org/wiki/You_aren&#39;t_gonna_need_it&quot;&gt;YAGNI&lt;/a&gt;
and &lt;a href=&quot;http://c2.com/cgi/wiki?PrematureOptimization&quot;&gt;premature optimization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All that said, let me admit that I spent a day or two thinking about this
problem, and the majority of that time was spent trying to work out the Hasse
solution.&lt;/p&gt;

&lt;p&gt;It was only when I worked out that the running time for my Hasse-based
datastructure was on the order of &lt;script type=&quot;math/tex&quot;&gt;O(N^2)&lt;/script&gt; that I decide to write the above
JavaScript code just to find out how slow the brute force solution was, and
whether it’d be within tolerable levels. Imagine my surprise when it turned
out that the brute force solution offered near instantaneous performance levels.&lt;/p&gt;

&lt;p&gt;I don’t personally know any people who self-identify as software engineers (in
my sense of the term; maybe they’ll utter the syllables “software engineer” while
giving a description of themselves, but when asked to elaborate, it won’t be
split along the same axis as I have), so I don’t know how a typical software
engineer would have answered this question.&lt;/p&gt;

&lt;p&gt;That said, I think the culture associated with (my definition of) computer
scientists would push us to immediately start thinking about fancy data
structures. This cultural baggage does one step worse than have us immediately
dismiss the “brute force solution”, instead it typically doesn’t even occur to
us to consider it for dismissal.&lt;/p&gt;

&lt;p&gt;At work the other day, an intern got bogged down in a piece of software, and I
tried to push him towards “Just get something working that solves the core
problem. If we need to, we can always come back and improve it later.” Seems
like I need to learn the same lesson.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 20:21:12 -0000</pubDate>
        <link>http://nebupookins.github.io//2015/07/04/software-engineering-challenge-recipe-database.html</link>
        <guid isPermaLink="true">http://nebupookins.github.io//2015/07/04/software-engineering-challenge-recipe-database.html</guid>
        
        <category>programming</category>
        
        
      </item>
    
  </channel>
</rss>
